const asyncHandler = require('express-async-handler');
const Player = require('../models/playerModel');

// @desc    Get players
// @route   GET /api/players
// @access  Private
const getPlayers = asyncHandler(async (req, res) => {
  const players = await Player.find({ user: req.user.id });
  res.status(200).json(players);
});

// @desc    Add player
// @route   POST /api/players
// @access  Private
const addPlayer = asyncHandler(async (req, res) => {
  if (!req.body.player.name) {
    //  res.status(400).json({ message: 'Please add a text field' });
    res.status(400);
    throw new Error('Please add player name');
  }
  if (!req.body.player.futbin_id) {
    //  res.status(400).json({ message: 'Please add a text field' });
    res.status(400);
    throw new Error('Please add player futbin id');
  }

  const playerExists = await Player.exists({
    user: req.user.id,
    futbin_id: req.body.player.futbin_id,
  });

  if (playerExists) {
    res.status(400);
    throw new Error('Player already exists');
  } else {
    const player = await Player.create({
      user: req.user.id,
      name: req.body.player.name,
      rating: req.body.player.rating,
      futbin_id: req.body.player.futbin_id,
    });
    console.log(player);
    res.status(200).json(player);
  }
});

// @desc    Update player
// @route   PUT /api/players/:id
// @access  Private
const updatePlayer = asyncHandler(async (req, res) => {
  const player = await Player.findById(req.params.id);

  if (!player) {
    res.status(400);
    throw new Error('Player not found');
  }

  // Check for user
  if (!req.user) {
    res.status(401);
    throw new Error('User not found');
  }
  // Make sure the logged in user matches the player user
  if (player.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error('User not authorized');
  }

  const updatedPlayer = await Player.findByIdAndUpdate(
    req.params.id,
    req.body,
    { new: true }
  );

  res.status(200).json(updatedPlayer);
});

// @desc    Delete player
// @route   DELETE /api/players/:id
// @access  Private
const deletePlayer = asyncHandler(async (req, res) => {
  const player = await Player.findById(req.params.id);

  if (!player) {
    res.status(400);
    throw new Error('Player not found');
  }

  // Check for user
  if (!req.user) {
    res.status(401);
    throw new Error('User not found');
  }
  // Make sure the logged in user matches the player user
  if (player.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error('User not authorized');
  }

  const deletedPlayer = await Player.findByIdAndDelete(req.params.id);

  res.status(200).json(deletedPlayer);
});

module.exports = {
  getPlayers,
  addPlayer,
  updatePlayer,
  deletePlayer,
};
